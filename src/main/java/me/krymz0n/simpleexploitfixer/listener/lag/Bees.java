package me.krymz0n.simpleexploitfixer.listener.lag;

import me.krymz0n.simpleexploitfixer.Main;
import org.bukkit.Chunk;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.event.world.ChunkUnloadEvent;

import java.util.ArrayList;

public class Bees implements Listener {
    private final Main plugin;

    public Bees(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent evt) {
        if (plugin.getConfig().getBoolean("LimitBeesOnChunkLoad/UnLoad")) {
            if (!evt.isNewChunk()) {
                Chunk c = evt.getChunk();
                ArrayList<Entity> entities = new ArrayList<>();
                for (Entity entity : c.getEntities()) {
                    if (entity.getType().equals(EntityType.BEE) && (!(entity.getType() == null))) {
                        entities.add(entity);
                        for (int i = plugin.getConfig().getInt("MaxBeesPerChunk"); i < entities.size(); i++) {
                            entity.remove();
                        }
                    }
                }
            }
        }
    }

    @EventHandler
    public void onChunkUnLoad(ChunkUnloadEvent evt) {
        if (plugin.getConfig().getBoolean("LimitBeesOnChunkLoad/UnLoad")) {
            Chunk c = evt.getChunk();
            ArrayList<Entity> entities = new ArrayList<>();
            for (Entity entity : c.getEntities()) {
                if (entity.getType().equals(EntityType.BEE) && (!(entity.getType() == null))) {
                    entities.add(entity);
                    for (int i = plugin.getConfig().getInt("MaxBeesPerChunk"); i < entities.size(); i++) {
                        entity.remove();
                    }
                }
            }
        }
    }
}
