package me.krymz0n.simpleexploitfixer.listener;

import me.krymz0n.simpleexploitfixer.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.world.ChunkLoadEvent;

public class RedstoneLag implements Listener {
    private final Main plugin;

    public RedstoneLag(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        if (plugin.getConfig().getBoolean("LimitRedstonePlaced")) {
            Chunk c = evt.getBlock().getChunk();
            Player p = evt.getPlayer();
            if (evt.getBlock().getType().equals(Material.REDSTONE_WIRE)) {
                if (plugin.count(c, Material.REDSTONE_WIRE) > plugin.getConfig().getInt("MaxRedstonePerChunk")) {
                    evt.setCancelled(true);

                }
            }
        }
    }

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent evt) {
        if (plugin.getConfig().getBoolean("LimitRedstoneOnChunkLoad") && !evt.isNewChunk()) {
            Chunk c = evt.getChunk();
            for (int x = 0; x < 16; x++) {
                for (int z = 0; z < 16; z++) {
                    for (int y = 0; y < 256; y++) {
                        if (c.getBlock(x, y, z).getType().equals(Material.REDSTONE_WIRE) && plugin.count(c, Material.REDSTONE_WIRE) > plugin.getConfig().getInt("MaxRedstonePerChunk") && !(c.getBlock(x, y, z).getType() == null)) {
                            c.getBlock(x, y, z).setType(Material.AIR);
                        }
                    }
                }
            }
        }
    }

    @EventHandler
    public void onBlockRedstoneEvent(BlockRedstoneEvent evt) {
        if (plugin.getConfig().getBoolean("DisableRedstoneAtMaxPerChunk")) {
            Chunk c = evt.getBlock().getChunk();
            if (evt.getNewCurrent() > evt.getOldCurrent()) {
                if (plugin.count(c, Material.REDSTONE_WIRE) > plugin.getConfig().getInt("MaxRedstonePerChunk")) {
                    int current = evt.getOldCurrent();
                    evt.setNewCurrent(current);
                }
            }
        }
    }
}
